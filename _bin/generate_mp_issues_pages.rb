#!/usr/bin/ruby

# Generate pages for an MP on each Issue 

require 'json'
require 'yaml'
require 'stancer'
require 'parallel'
require 'fileutils'

@people  = JSON.parse(File.read('_data/people.yaml'))
@parties = JSON.parse(File.read('_data/parties.yaml'))
@issues  = JSON.parse(File.read('_data/issues.yaml'))

def stance(mp, i)
    warn "Calculating #{mp['name']} stance on #{i['text']}"
    stance = Stance.new( "voter.id:#{mp['id']}", Issue.new(i['id'])).score
    {
      "id"        => i['id'],
      "title"     => i['text'],
      "text"      => i['html'],
      "score"     => stance[:score],
      "max_score" => stance[:max],
      "num_votes" => stance[:num_votes],
      # In this version, this is positive. TODO move this to the stancer
      # and cope with negatives.
      "weight"    => stance[:max].zero? ? 0 : stance[:score] / stance[:max] 
    }
end

ppl = ARGV[0].nil? ? @people : @people.select { |mp| mp['id'] == ARGV[0] }
warn "Operating on #{ppl.count} ppl"

ppl.each do |mp|
  Parallel.each(@issues, :in_threads => 10) do |i|
    FileUtils.mkpath "breakdown/#{i['id']}"
    filename = "breakdown/#{i['id']}/#{mp['id']}.md"
    warn "Write to #{filename}"
    data = {
      "layout" => 'breakdown',
      #Â "permalink" => "/breakdown/#{mp['id']}/#{i['id']}.html",
      "id" => mp['id'],
      "name" => mp['name'],
      "issue" => i,
      "stance" => stance(mp, i),
      "autogenerated" => true,

    }
    text = data.to_yaml + "---\n"
    warn text
    File.write(filename, text)
  end
end
