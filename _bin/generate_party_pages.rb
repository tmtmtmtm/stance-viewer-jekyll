#!/usr/bin/ruby

# Generate pages for each Party

require 'json'
require 'yaml'
require 'stancer'
require 'parallel'

# @people  = JSON.parse(File.read('_data/people.yaml'))
@parties = JSON.parse(File.read('_data/parties.yaml'))
@issues  = JSON.parse(File.read('_data/issues.yaml'))

def stances(party)
  @issues.map { |i|
    warn "Calculating #{party} stance on #{i['text']}"
    stance = Stance.new( "party.id:#{party['id']}", Issue.new(i['id'])).score
    {
      "id"        => i['id'],
      "title"     => i['text'],
      "text"      => i['html'],
      "score"     => stance[:score],
      "max_score" => stance[:max],
      "num_votes" => stance[:num_votes],
      "weight"    => stance[:max].zero? ? 0 : stance[:score] / stance[:max],
      
    }
  }
end

ps = ARGV[0].nil? ? @parties : @parties.select { |p| p['id'] == ARGV[0] }
warn "Operating on #{ps.count} parties"

Parallel.each(ps, :in_threads => 5) do |party|
  filename = "party/#{party['id']}.md"
  warn "Processing #{party['id']} to #{filename}"

  data = {
    "layout" => 'party',
    "id" => party['id'],
    "title" => party['name'],
    "stances" => stances(party),
    "autogenerated" => true,
  }
  text = data.to_yaml + "---\n"
  warn text
  File.write(filename, text)
end
